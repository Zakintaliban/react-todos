{"version":3,"sources":["components/navbar.js","components/todo.js","components/todoList.js","TodoStore.js","App.js","serviceWorker.js","index.js"],"names":["observer","props","useState","menu","setMenu","value","setValue","addTodo","store","className","onClick","aria-label","aria-expanded","data-target","aria-hidden","onSubmit","e","preventDefault","alert","type","onChange","target","todo","done","toggleDone","bind","this","deleteTodo","todos","filteredTodos","length","placeholder","filter","map","key","id","Todo","Date","now","observable","TodoStore","matchCase","RegExp","test","action","push","indexOf","t","computed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68b38bbe.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { observer } from \"mobx-react\";\n\nfunction Navbar(props) {\n  const [menu, setMenu] = useState(false);\n  const [value, setValue] = useState(\"\");\n\n  const { addTodo } = props.store;\n\n  const prepareAddTodo = e => {\n    e.preventDefault();\n    if (value == \"\") {\n      alert(\"ISI LAH\");\n      return;\n    }\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <div className=\"navbar has-shadow\">\n      <div className=\"navbar-brand\">\n        <div className=\"navbar-item\">\n          <p className=\"title\">Easy Todo</p>\n        </div>\n\n        <button\n          onClick={() => setMenu(!menu)}\n          className={`navbar-burger burger ${menu ? \"is-active\" : \"\"}`}\n          aria-label=\"menu\"\n          aria-expanded=\"false\"\n          data-target=\"navbarBasicExample\"\n        >\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </button>\n      </div>\n\n      <div className={`navbar-menu ${menu ? \"is-active\" : \"\"}`}>\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            <form onSubmit={prepareAddTodo} className=\"field has-addons\">\n              <p className=\"control is-expanded\">\n                <input\n                  value={value}\n                  type=\"text\"\n                  onChange={e => setValue(e.target.value)}\n                  className=\"input\"\n                />\n              </p>\n              <p className=\"control\">\n                <button className=\"button is-info has-text-weight-bold\">\n                  Add Todo\n                </button>\n              </p>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default observer(Navbar);\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nfunction Todo(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"level\">\n          <div className=\"level-left\">\n            <div className=\"level-item\">\n              <p className={`title ${props.todo.done ? \"has-text-grey-light\" : \"\"}`}>{props.todo.value}</p>\n            </div>\n          </div>\n          <div className=\"level-right\">\n            <div className=\"level-item buttons\">\n              <button onClick={props.toggleDone.bind(this, props.todo)} className={`button has-text-weight-bold ${props.todo.done ? \"is-warning\" : \"is-primary\"}`}>{props.todo.done ? \"Undo\" : \"Done\"}</button>\n              <button onClick={props.deleteTodo.bind(this, props.todo)} className=\"button is-danger has-text-weight-bold\">Delete</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default observer(Todo)","import React from 'react'\n\nimport Todo from \"./todo\";\nimport { observer } from 'mobx-react';\n\n// could be done as well\n// @observer\nfunction TodoList(props) {\n  // Import the actions and properties\n  const { todos, toggleDone, deleteTodo, filteredTodos } = props.store\n\n  return (\n    <div>\n      <div className=\"hero is-info\">\n        <div className=\"hero-body has-text-centered\">\n          <p className=\"title is-1\">{todos.length} Todos</p>\n        </div>\n      </div>\n\n      <section className=\"section\">\n        <div className=\"container\">\n          <input className=\"input\" placeholder=\"Search...\" type=\"text\" value={props.store.filter} onChange={(e) => props.store.filter = e.target.value} />\n        </div>\n      </section>\n\n      <section className=\"section\">\n        <div className=\"container\">\n          {filteredTodos.map(todo => (\n            <Todo key={todo.id} todo={todo} toggleDone={toggleDone} deleteTodo={deleteTodo} />\n          ))}\n        </div>\n      </section>\n    </div>\n  )\n}\n\n// another way of using MobX\nexport default observer(TodoList)","import { observable, action, computed } from \"mobx\";\n\nexport class Todo {\n  @observable value;\n  @observable done;\n\n  constructor(value) {\n    this.id = Date.now();\n    this.value = value;\n    this.done = false;\n  }\n}\n\nexport class TodoStore {\n  @observable todos = [];\n  @observable filter = \"\";\n\n  @action addTodo = value => {\n    this.todos.push(new Todo(value));\n  };\n  @action toggleDone = todo => {\n    this.todos[this.todos.indexOf(todo)].done = !this.todos[\n      this.todos.indexOf(todo)\n    ].done;\n  };\n  @action deleteTodo = todo => {\n    this.todos = this.todos.filter(t => t !== todo);\n  };\n\n  @computed get filteredTodos() {\n    const matchCase = new RegExp(this.filter, \"i\");\n    return this.todos.filter(\n      todo => !this.filter || matchCase.test(todo.value)\n    );\n  }\n}\n","import React from \"react\";\nimport Navbar from \"./components/navbar\";\nimport TodoList from \"./components/todoList\";\nimport {TodoStore} from './TodoStore';\n\nfunction App() {\n  const store = new TodoStore();\n  return (\n     <div>\n      <Navbar store={store}/>    {/*<= Here*/}\n      <TodoList store={store}/>  {/*<= Here*/}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}